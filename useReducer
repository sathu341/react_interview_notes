The useReducer hook in React is used to manage complex state logic in functional components. It's
recommended when you need to handle multiple types of state changes, or when you want to optimize 
performance:
Complex state
When you have multiple state variables that depend on each other, or when you need to update 
state variables at once
Performance optimization
When you want to avoid unnecessary re-renders or calculations
Global state
When you need to manage state that's shared across components, like a theme or user object
Many state transitions
When you have many possible state transitions, and it's difficult to manage them with useState 
Here are some things to keep in mind when using useReducer:
Don't use useReducer for simple state that can be managed with useState
Don't use useReducer if you don't need to perform side effects or asynchronous operations
Don't use useReducer if you don't want to add extra boilerplate code 
The useReducer hook takes in a reducer function and an initial state as arguments. It returns an 
array of the current state and a dispatch function. The dispatch function accepts an object that 
represents the action type to execute.


Set up the project:
Make sure you have a React project set up. You can create one using Create React App if you haven't already:

bash
Copy code
npx create-react-app usereducer-example
cd usereducer-example
npm start
Create a Counter component:
Counter.js:

jsx
Copy code
import React, { useReducer } from 'react';

// Define the initial state of the counter
const initialState = { count: 0 };

// Define a reducer function
function reducer(state, action) {
  switch (action.type) {
    case 'increment':
      return { count: state.count + 1 };
    case 'decrement':
      return { count: state.count - 1 };
    case 'reset':
      return { count: 0 };
    default:
      throw new Error();
  }
}

function Counter() {
  const [state, dispatch] = useReducer(reducer, initialState);

  return (
    <div>
      <h1>Count: {state.count}</h1>
      <button onClick={() => dispatch({ type: 'increment' })}>Increment</button>
      <button onClick={() => dispatch({ type: 'decrement' })}>Decrement</button>
      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>
    </div>
  );
}

export default Counter;
Use the Counter component in App:
App.js:

jsx
Copy code
import React from 'react';
import Counter from './Counter';

function App() {
  return (
    <div className="App">
      <h1>useReducer Example</h1>
      <Counter />
    </div>
  );
}

export default App;
Explanation:
initialState:

The initial state of the counter is defined as { count: 0 }.
reducer Function:

The reducer function takes the current state and an action object as arguments.
Based on the action.type, the reducer returns a new state.
If action.type is 'increment', the count is incremented by 1.
If action.type is 'decrement', the count is decremented by 1.
If action.type is 'reset', the count is set to 0.
useReducer Hook:

useReducer takes the reducer function and initialState as arguments and returns the current state and a dispatch function.
The state represents the current state managed by the reducer.
The dispatch function is used to send action objects to the reducer.
Counter Component:

The Counter component displays the current count and three buttons.
Each button calls the dispatch function with a specific action type to update the state.
Step 4: Run the application
Run your application using npm start. You should see the Counter component with the current count displayed and three buttons to increment, decrement, and reset the count.

Use Case for useReducer:
The useReducer hook is particularly useful when:

You have complex state logic that involves multiple sub-values or when the next state depends on the previous one.
You want to centralize the logic for updating the state.
You want a predictable state transition logic.
